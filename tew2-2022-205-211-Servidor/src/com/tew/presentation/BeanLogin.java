package com.tew.presentation;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Map;
import java.util.ResourceBundle;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.context.FacesContext;

import com.tew.business.LoginService;
import com.tew.infrastructure.Factories;
import com.tew.model.User;
import com.tew.persistence.exception.PersistenceException;

@ManagedBean(name="login")
public class BeanLogin implements Serializable{
	private static final long serialVersionUID = 6940871785970821564L;
	private String name;
	private String password;
	User user = null;
	public String verify() {
		// necesario para accede a msgs y a los mensajes en español e ingles de los ficheros
		// de propiedades
		FacesContext jsfCtx = FacesContext.getCurrentInstance();
		ResourceBundle bundle = jsfCtx.getApplication().getResourceBundle(jsfCtx, "msgs");
		FacesMessage msg = null;
		LoginService login = Factories.services.createLoginService();
		user = login.verify(name, password);
		if (user != null) {
			System.out.println("entro a meter en sesion a un user");
			putUserInSession(user);
			if(user.getName()=="UsuarioAgente") {
				System.out.println(user.getName());
				return "agente";
			}else if(user.getName()=="UsuarioCliente") {
				System.out.println(user.getName());
				return "cliente";	
			}
		}
		// si el usuario no se encuentra
		// se prepara el mensaje que saldra en la vista del cliente
		msg = new FacesMessage(FacesMessage.SEVERITY_WARN,
				bundle.getString("login_form_result_error"), null);
		// se añade al element con id=”msg”
		FacesContext.getCurrentInstance().addMessage(null, msg);
		return "login";
	}

	private void putUserInSession(User user) {
		Map<String, Object> session =
				FacesContext.getCurrentInstance().getExternalContext().getSessionMap();
		session.put("LOGGEDIN_USER", user);
	}

	public String logout() {
		if(user != null) {
			Map<String, Object> session =
					FacesContext.getCurrentInstance().getExternalContext().getSessionMap();
			session.remove("LOGGEDOUT_USER", user);
			return "exito";
		}
		return "error";
	}

	public void reset() {
		Map<String, Object> session = FacesContext.getCurrentInstance().getExternalContext().getSessionMap();
		session.clear();

		System.out.println("entro a borrar la base de datos");
		ejecutaSQL("drop table pisosparavisitar");
		ejecutaSQL("drop table pisos");
		ejecutaSQL("drop table agentes");
		ejecutaSQL("drop table clientes");
		ejecutaSQL("CREATE MEMORY TABLE PUBLIC.AGENTES(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,LOGIN VARCHAR(200) NOT NULL,EMAIL VARCHAR(200),PASSWD VARCHAR(200) NOT NULL)");
		ejecutaSQL("CREATE MEMORY TABLE PUBLIC.CLIENTES(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,LOGIN VARCHAR(200) NOT NULL,PASSWD VARCHAR(200) NOT NULL,NOMBRE VARCHAR(32768) NOT NULL,APELLIDOS VARCHAR(200) NOT NULL,EMAIL VARCHAR(200) NOT NULL)");
		ejecutaSQL("CREATE MEMORY TABLE PUBLIC.PISOS(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,IDAGENTE INTEGER NOT NULL,PRECIO INTEGER NOT NULL,DIRECCION VARCHAR(200) NOT NULL,CIUDAD VARCHAR(200) NOT NULL,ANO INTEGER,ESTADO INTEGER NOT NULL,FOREIGN KEY(IDAGENTE) REFERENCES PUBLIC.AGENTES(ID))"); 
		ejecutaSQL("CREATE MEMORY TABLE PUBLIC.PISOSPARAVISITAR(IDPISO INTEGER NOT NULL,IDCLIENTE INTEGER NOT NULL,FECHAHORACITA TIMESTAMP,ESTADOVISITA INTEGER NOT NULL,PRIMARY KEY(IDPISO,IDCLIENTE),FOREIGN KEY(IDPISO) REFERENCES PUBLIC.PISOS(ID),FOREIGN KEY(IDCLIENTE) REFERENCES PUBLIC.CLIENTES(ID))");
		ejecutaSQL("INSERT INTO AGENTES VALUES(0,'Alfredo','Alfredo@agentes.com','Alfredo')");
		ejecutaSQL("INSERT INTO AGENTES VALUES(1,'Amanda','Amanda@agentes.com','Amanda')");
		ejecutaSQL("INSERT INTO CLIENTES VALUES(0,'Pepe','Pepe','Pepe Jose','Alfonso Ramirez','Pepe@clientes.com')");
		ejecutaSQL("INSERT INTO CLIENTES VALUES(1,'Pepa','Pepa','Pepa Josefa','Ramirez Alfonso','Pepa@clientes.com')");
		ejecutaSQL("INSERT INTO PISOS VALUES(0,0,200000,'Calle del Paraiso','Oviedo',1989,4)");
		ejecutaSQL("INSERT INTO PISOS VALUES(1,0,3000,'Calle de Arriba','Oviedo',1989,2)");
		ejecutaSQL("INSERT INTO PISOS VALUES(2,0,2230,'Calle de Abajo','Oviedo',1989,5)");
		ejecutaSQL("INSERT INTO PISOS VALUES(3,0,5000,'Calle del Cuba','Aviles',1989,2)");
		ejecutaSQL("INSERT INTO PISOS VALUES(4,0,23000,'Calle del Puerto Rico','Aviles',1989,1)");
		ejecutaSQL("INSERT INTO PISOS VALUES(5,0,23466,'Calle del Colombia','Oviedo',1989,2)");
		ejecutaSQL("INSERT INTO PISOS VALUES(6,0,23459,'Calle del Amsterdam','Aviles',1989,2)");
		ejecutaSQL("INSERT INTO PISOS VALUES(7,0,8676,'Calle del Chile','Oviedo',1989,3)");
		ejecutaSQL("INSERT INTO PISOS VALUES(8,0,134666,'Calle del Congo','Oviedo',1989,4)");
		ejecutaSQL("INSERT INTO PISOS VALUES(9,0,236789,'Calle del Peru','Gijon',1989,2)");
		ejecutaSQL("INSERT INTO PISOS VALUES(10,1,345000,'Calle del EEUU','Oviedo',1989,1)");
		ejecutaSQL("INSERT INTO PISOS VALUES(11,1,78900,'Calle del Canada','Oviedo',1989,0)");
		ejecutaSQL("INSERT INTO PISOS VALUES(12,1,300000,'Calle del Tahiti','Gijon',1989,3)");
		ejecutaSQL("INSERT INTO PISOS VALUES(13,1,812000,'Calle del Venezuela','Oviedo',1989,5)");
		ejecutaSQL("INSERT INTO PISOS VALUES(14,1,86312,'Calle del Argentina','Oviedo',1989,1)");
		ejecutaSQL("INSERT INTO PISOS VALUES(15,1,75100,'Calle del Uruguay','Grado',1989,1)");
		ejecutaSQL("INSERT INTO PISOS VALUES(16,1,545000,'Calle del Paraguay','Oviedo',1989,3)");
		ejecutaSQL("INSERT INTO PISOS VALUES(17,1,200000,'Calle del Republica Dominica','Aviles',1989,4)");
		ejecutaSQL("INSERT INTO PISOS VALUES(18,1,412300,'Calle del Mexico','Gijon',1989,1)");
		ejecutaSQL("INSERT INTO PISOS VALUES(19,1,876210,'Calle del Paraiso','Oviedo',1989,4)");
		ejecutaSQL("INSERT INTO PISOSPARAVISITAR VALUES(0,1,'1970-01-02 00:00:00.000000',1)");
		ejecutaSQL("INSERT INTO PISOSPARAVISITAR VALUES(1,0,'1970-01-02 00:00:00.000000',1)");
		ejecutaSQL("INSERT INTO PISOSPARAVISITAR VALUES(2,1,'1970-01-02 00:00:00.000000',2)");
		ejecutaSQL("INSERT INTO PISOSPARAVISITAR VALUES(3,0,'1970-01-02 00:00:00.000000',2)");
		ejecutaSQL("INSERT INTO PISOSPARAVISITAR VALUES(4,1,'1970-01-02 00:00:00.000000',3)");
		ejecutaSQL("INSERT INTO PISOSPARAVISITAR VALUES(5,0,'1970-01-02 00:00:00.000000',3)");
		ejecutaSQL("INSERT INTO PISOSPARAVISITAR VALUES(6,1,'1970-01-02 00:00:00.000000',1)");
		ejecutaSQL("INSERT INTO PISOSPARAVISITAR VALUES(7,0,'1970-01-02 00:00:00.000000',1)");
		ejecutaSQL("INSERT INTO PISOSPARAVISITAR VALUES(8,1,'1970-01-02 00:00:00.000000',2)");
		ejecutaSQL("INSERT INTO PISOSPARAVISITAR VALUES(9,0,'1970-01-02 00:00:00.000000',2)");
		ejecutaSQL("INSERT INTO PISOSPARAVISITAR VALUES(10,1,'1970-01-02 00:00:00.000000',3)");
		ejecutaSQL("INSERT INTO PISOSPARAVISITAR VALUES(11,0,'1970-01-02 00:00:00.000000',3)");
		ejecutaSQL("INSERT INTO PISOSPARAVISITAR VALUES(12,1,'1970-01-02 00:00:00.000000',1)");
		ejecutaSQL("INSERT INTO PISOSPARAVISITAR VALUES(13,0,'1970-01-02 00:00:00.000000',1)");
		ejecutaSQL("INSERT INTO PISOSPARAVISITAR VALUES(14,1,'1970-01-02 00:00:00.000000',2)");
		ejecutaSQL("INSERT INTO PISOSPARAVISITAR VALUES(15,0,'1970-01-02 00:00:00.000000',2)");
		ejecutaSQL("INSERT INTO PISOSPARAVISITAR VALUES(16,1,'1970-01-02 00:00:00.000000',3)");
		ejecutaSQL("INSERT INTO PISOSPARAVISITAR VALUES(17,0,'1970-01-02 00:00:00.000000',3)");
	}

	public void ejecutaSQL(String s) {
		PreparedStatement ps = null;
		Connection con = null;
		try {
			String SQL_DRV = "org.hsqldb.jdbcDriver";
			String SQL_URL = "jdbc:hsqldb:hsql://localhost/localDB";
			Class.forName(SQL_DRV);
			con = DriverManager.getConnection(SQL_URL, "sa", "");
			ps = con.prepareStatement(s);
			ps.executeUpdate();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new PersistenceException("Driver not found", e);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new PersistenceException("Invalid SQL or database schema", e);
		}
		finally  {
			if (ps != null) {
				try{ ps.close(); } catch (Exception ex){}
			};
			if (con != null) {
				try{ con.close(); 
				} 
				catch (Exception ex){
				}};
		}
	}

	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
}
